You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.

The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.

 

Example 1:

Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11
Example 2:

Input: values = [1,2]
Output: 2
 

Constraints:

2 <= values.length <= 5 * 104
1 <= values[i] <= 1000


```
class Solution {
    public int maxScoreSightseeingPair(int[] values) {
        /* values[j] - j + values[i] +i should me maximum 
         so we will maintain a score and which represents max of (values[i] + i) 's and 
         in maxscore we will add this maxscore to a[j] - j , ie, values[i] + i (score) + values[j]-j*/
        
        int n = values.length;
        int score = values[0]+0;
        int maxscore = 0;
        for(int i=1;i<n;i++){
            
            maxscore = Math.max(maxscore,score+values[i]-i);
            score = Math.max(score,values[i]+i);
        }
        return maxscore;
    }
}

```
